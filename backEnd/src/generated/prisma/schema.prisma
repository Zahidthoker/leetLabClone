// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      userRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solvedProblems problemSolved[]
  problem        Problem[]
  submission     Submission[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[] //["tag1", "tag2", "tag3"]
  userId      String
  examples    Json
  constraints String[]
  hints       String?
  editorial   String?

  testCases        Json
  codeSnippets     Json
  refrenceSolution Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  solvedBy   problemSolved[]
  submission Submission[]
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Submission {
  id             String   @id @default(uuid())
  userId         String
  problemId      String
  sourceCode     String
  language       String
  status         String
  stdin          String?
  stdout         String?
  compiledOutput String?
  timeTaken      Int
  memoryUsed     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  testcases TestCaseResult[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testCaseIndex  Int
  passed         Boolean
  input          String
  stderr         String?
  expectedOutput String
  actualOutput   String?
  compiledOutput String?
  status         String
  timeTaken      Int
  memoryUsed     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

// when complete writing model run the command (npx prisma format)

// when complete writing model run the command (npx prisma format)
